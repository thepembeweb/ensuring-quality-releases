trigger:
- none

variables:
- group: terraform-group

- group: pl-group

- name: vmImageName
  value: 'ubuntu-latest' 

- name: environmentName
  value: 'Test'

stages:
- stage: Build
  displayName: Build
  jobs:
  - job: Terraform
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DownloadSecureFile@1
      name: terraformvarsfile
      displayName: 'Download tfvars file'
      inputs:
        secureFile: 'terraform.tfvars' 
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'known_hosts'
        sshKeySecureFile: 'id_rsa'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          mv /home/vsts/work/_temp/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '0.13.4'
    - task: TerraformTaskV1@0
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: '$(service_name)'
        backendAzureRmResourceGroupName: '$(resource_group_name)'
        backendAzureRmStorageAccountName: '$(storage_account_name)'
        backendAzureRmContainerName: '$(container_name)'
        backendAzureRmKey: '$(key)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    - task: TerraformTaskV1@0
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: |
         -auto-approve 
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(service_name)'

- stage: Artifacts
  displayName: Artifacts
  jobs:
  - job: Artifacts
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi    
    - task: ArchiveFiles@2
      displayName: 'Archive Selenium files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/selenium.zip
        replaceExistingArchive: true
    - upload: $(Build.ArtifactStagingDirectory)/selenium.zip
      artifact: Selenium            

- stage: Deploy
  jobs:
  - deployment: Deploy 
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(service_name)'
              appName: '$(appName)'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDeploy
    displayName: VMDeploy
    environment:
      name:  $(environmentName)
      resourceType: VirtualMachine
      tags: myVM
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
               sudo apt-get update
               sudo apt-get install unzip -y
               sudo apt-get install -y chromium-browser	
               if [ ! -f /usr/bin/chromedriver ]; then
                  wget https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
                  unzip chromedriver_linux64.zip
                  sudo mv chromedriver /usr/bin/chromedriver
                  sudo chown root.root /usr/bin/chromedriver
                  sudo chmod +x /usr/bin/chromedriver
               fi	
               sudo apt-get install python3-pip -y	
               sudo pip3 install selenium==3.14.0
               #Log Analytics Agent
               #wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w '$(workspaceid)' -s '$(storage_key)' -d opinsights.azure.com	
            displayName: 'Setup VM'
          - download: current
            displayName: 'Download py file'
            artifact: Selenium
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                if [ ! -d /var/log/selenium ]; then
                  sudo mkdir /var/log/selenium
                  sudo chmod 777 /var/log/selenium
                fi
                unzip -o $(Pipeline.Workspace)/Selenium/selenium.zip -d .
                python3 uitest.py
            displayName: 'Run UI Test'

- stage: Tests
  jobs: 
    - job: Tests
      displayName: 'Tests'
      steps:
      - task: Npm@1
        inputs:
          workingDir: '$(System.DefaultWorkingDirectory)'
          verbose: false
        displayName: 'Install Newman'
      - script: newman run ./automatedtesting/postman/regressiontest.json --reporters cli,junit --reporter-junit-export ./regressiontest.xml --suppress-exit-code
        displayName: 'Run Newman Regression Test'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      - script: newman run ./automatedtesting/postman/validationtest.json -e automatedtesting/postman/validationtestenv.postman_environment.json --reporters cli,junit --reporter-junit-export ./validationtest.xml --suppress-exit-code
        displayName: 'Run Newman Validation Test'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      - task: PublishTestResults@2
        inputs:
          testResultsFiles: '$(System.DefaultWorkingDirectory)/*.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)'
        displayName: 'Publish Test Results'
      - task: JMeterInstaller@0
        inputs:
         jmeterVersion: '5.2.1'
        displayName: 'Install JMeter 5.2.1' 
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
             jmeter -n -t ./automatedtesting/jmeter/Stress_test.jmx -l ./automatedtesting/jmeter/stress_test_result.csv -e -o ./automatedtesting/jmeter/stress_test_html_report/ -j ./automatedtesting/jmeter/jmeter_stress_test.log
        displayName: 'Jmeter Stress Test' 
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
             jmeter -n -t ./automatedtesting/jmeter/Endurance_test.jmx -l ./automatedtesting/jmeter/Endurance_test_result.csv -e -o ./automatedtesting/jmeter/Endurance_test_html_report/ -j ./automatedtesting/jmeter/jmeter_endurance_test.log
        displayName: 'Jmeter Endurance Test' 
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: 'automatedtesting/jmeter'
          ArtifactName: 'jmeter'
          publishLocation: 'Container'
